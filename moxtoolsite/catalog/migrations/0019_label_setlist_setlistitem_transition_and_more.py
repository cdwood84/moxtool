# Generated by Django 5.2 on 2025-04-08 01:53

import catalog.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0018_alter_track_mix_alter_trackinstance_comments_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beatport_label_id', models.BigIntegerField(help_text='Label ID from Beatport, found in the label URL, which can be used to populate metadata.', verbose_name='Beatport Label ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('public', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
                'permissions': (('moxtool_can_create_public_label', 'Label - Create Public - DJ'), ('moxtool_can_create_own_label', 'Label - Create Own - DJ'), ('moxtool_can_create_any_label', 'Label - Create Any - MOX'), ('moxtool_can_view_public_label', 'Label - View Public - DJ'), ('moxtool_can_view_own_label', 'Label - View Own - DJ'), ('moxtool_can_view_any_label', 'Label - View Any - MOX'), ('moxtool_can_modify_public_label', 'Label - Modify Public - DJ'), ('moxtool_can_modify_own_label', 'Label - Modify Own - DJ'), ('moxtool_can_modify_any_label', 'Label - Modify Any - MOX')),
            },
            bases=(models.Model, catalog.models.SharedModelMixin, catalog.models.LabelMixin, catalog.models.SoupMixin),
        ),
        migrations.CreateModel(
            name='SetList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this setlist and owner library', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('date_played', models.DateField(blank=True, null=True)),
                ('comments', models.TextField(help_text='Enter any notes you want to remember about this track.', max_length=1000)),
                ('public', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['date_played'],
                'permissions': (('moxtool_can_create_own_setlist', 'SetList - Create Own - DJ'), ('moxtool_can_create_any_setlist', 'SetList - Create Any - MOX'), ('moxtool_can_view_own_setlist', 'SetList - View Own - DJ'), ('moxtool_can_view_public_setlist', 'SetList - View Public - DJ'), ('moxtool_can_view_any_setlist', 'SetList - View Any - MOX'), ('moxtool_can_modify_own_setlist', 'SetList - Modify Own - DJ'), ('moxtool_can_modify_public_setlist', 'SetList - Modify Public - DJ'), ('moxtool_can_modify_any_setlist', 'SetList - Modify Any - MOX')),
            },
            bases=(models.Model, catalog.models.SharedModelMixin, catalog.models.SetListMixin),
        ),
        migrations.CreateModel(
            name='SetListItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this setlist item', primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
            ],
            options={
                'ordering': ['setlist', 'start_time'],
                'permissions': (('moxtool_can_create_own_setlistitem', 'SetListItem - Create Own - DJ'), ('moxtool_can_create_any_setlistitem', 'SetListItem - Create Any - MOX'), ('moxtool_can_view_own_setlistitem', 'SetListItem - View Own - DJ'), ('moxtool_can_view_public_setlistitem', 'SetListItem - View Public - DJ'), ('moxtool_can_view_any_setlistitem', 'SetListItem - View Any - MOX'), ('moxtool_can_modify_own_setlistitem', 'SetListItem - Modify Own - DJ'), ('moxtool_can_modify_public_setlistitem', 'SetListItem - Modify Public - DJ'), ('moxtool_can_modify_any_setlistitem', 'SetListItem - Modify Any - MOX')),
            },
            bases=(models.Model, catalog.models.SharedModelMixin, catalog.models.SetListItemMixin),
        ),
        migrations.CreateModel(
            name='Transition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this transition and owner library', primary_key=True, serialize=False)),
                ('comments', models.TextField(help_text='Enter any notes you want to remember about this transition.', max_length=1000)),
                ('date_modified', models.DateField(blank=True, null=True)),
                ('public', models.BooleanField(default=False)),
                ('rating', models.CharField(blank=True, choices=[('0', 'unplayable'), ('1', 'atrocious'), ('2', 'terrible'), ('3', 'bad'), ('4', 'meh'), ('5', 'okay'), ('6', 'fine'), ('7', 'good'), ('8', 'great'), ('9', 'excellent'), ('10', 'perfect')], default=None, help_text='Transition rating', max_length=2)),
            ],
            options={
                'ordering': ['date_modified'],
                'permissions': (('moxtool_can_create_own_transition', 'Transition - Create Own - DJ'), ('moxtool_can_create_any_transition', 'Transition - Create Any - MOX'), ('moxtool_can_view_own_transition', 'Transition - View Own - DJ'), ('moxtool_can_view_public_transition', 'Transition - View Public - DJ'), ('moxtool_can_view_any_transition', 'Transition - View Any - MOX'), ('moxtool_can_modify_own_transition', 'Transition - Modify Own - DJ'), ('moxtool_can_modify_public_transition', 'Transition - Modify Public - DJ'), ('moxtool_can_modify_any_transition', 'Transition - Modify Any - MOX')),
            },
            bases=(models.Model, catalog.models.SharedModelMixin, catalog.models.TransitionMixin),
        ),
        migrations.RemoveConstraint(
            model_name='artist',
            name='artist_name_case_insensitive_unique',
        ),
        migrations.RemoveConstraint(
            model_name='genre',
            name='genre_name_case_insensitive_unique',
        ),
        migrations.AddField(
            model_name='artist',
            name='beatport_artist_id',
            field=models.BigIntegerField(default=0, help_text='Artist ID from Beatport, found in the artist URL, which can be used to populate metadata.', verbose_name='Beatport Artist ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='genre',
            name='beatport_genre_id',
            field=models.BigIntegerField(default=0, help_text='Genre ID from Beatport, found in the genre URL, which can be used to populate metadata.', verbose_name='Beatport Genre ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='track',
            name='bpm',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='key',
            field=models.CharField(max_length=8, null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='length',
            field=models.CharField(max_length=5, null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='released',
            field=models.DateField(null=True),
        ),
        migrations.AddField(
            model_name='trackrequest',
            name='bpm',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='trackrequest',
            name='key',
            field=models.CharField(max_length=8, null=True),
        ),
        migrations.AddField(
            model_name='trackrequest',
            name='length',
            field=models.CharField(max_length=5, null=True),
        ),
        migrations.AddField(
            model_name='trackrequest',
            name='released',
            field=models.DateField(null=True),
        ),
        migrations.AlterField(
            model_name='artist',
            name='name',
            field=models.CharField(max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='track',
            name='mix',
            field=models.CharField(help_text='the mix version of the track (e.g. Original Mix, Remix, etc.)', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='track',
            name='remix_artist',
            field=models.ManyToManyField(help_text='Select a remix artist for this track', related_name='remix_artist', to='catalog.artist'),
        ),
        migrations.AlterField(
            model_name='track',
            name='title',
            field=models.CharField(max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='trackrequest',
            name='genre',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.genre'),
        ),
        migrations.AlterField(
            model_name='trackrequest',
            name='mix',
            field=models.CharField(help_text='the mix version of the track (e.g. Original Mix, Remix, etc.)', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='trackrequest',
            name='remix_artist',
            field=models.ManyToManyField(help_text='Select a remix artist for this track', related_name='request_remix_artist', to='catalog.artist'),
        ),
        migrations.AlterField(
            model_name='trackrequest',
            name='title',
            field=models.CharField(max_length=200, null=True),
        ),
        migrations.AddConstraint(
            model_name='artist',
            constraint=models.UniqueConstraint(models.F('beatport_artist_id'), condition=models.Q(('beatport_artist_id__isnull', False)), name='beatport_artist_id_if_set_unique', violation_error_message='This artist ID from Beatport is already attached to another artist.'),
        ),
        migrations.AddConstraint(
            model_name='genre',
            constraint=models.UniqueConstraint(models.F('beatport_genre_id'), condition=models.Q(('beatport_genre_id__isnull', False)), name='beatport_genre_id_if_set_unique', violation_error_message='This genre ID from Beatport is already attached to another genre.'),
        ),
        migrations.AddConstraint(
            model_name='label',
            constraint=models.UniqueConstraint(models.F('beatport_label_id'), condition=models.Q(('beatport_label_id__isnull', False)), name='beatport_label_id_if_set_unique', violation_error_message='This label ID from Beatport is already attached to another label.'),
        ),
        migrations.AddField(
            model_name='track',
            name='label',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.label'),
        ),
        migrations.AddField(
            model_name='trackrequest',
            name='label',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.label'),
        ),
        migrations.AddField(
            model_name='setlist',
            name='tag',
            field=models.ManyToManyField(blank=True, help_text='Select one or more tags for this playlist.', to='catalog.tag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='setlist',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='setlistitem',
            name='setlist',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.setlist'),
        ),
        migrations.AddField(
            model_name='setlistitem',
            name='trackinstance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.trackinstance'),
        ),
        migrations.AddField(
            model_name='transition',
            name='from_track',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='from_track', to='catalog.trackinstance'),
        ),
        migrations.AddField(
            model_name='transition',
            name='to_track',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='to_track', to='catalog.trackinstance'),
        ),
        migrations.AddField(
            model_name='transition',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='transition',
            constraint=models.CheckConstraint(condition=models.Q(('from_track', models.F('to_track')), _negated=True), name='fields_not_equal'),
        ),
        migrations.AddConstraint(
            model_name='transition',
            constraint=models.UniqueConstraint(fields=('from_track', 'to_track', 'user'), name='unique_title_subtitle_user'),
        ),
    ]
