# Generated by Django 5.1.6 on 2025-03-13 18:24

import django.db.models.deletion
import django.db.models.functions.text
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['name'],
                'permissions': (('can_view_artist', 'Browse artists'), ('can_create_artist', 'Create an artist'), ('can_modify_artist', 'Modify an artist')),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a dance music genre (e.g. Progressive House, Future Bass, etc.)', max_length=200, unique=True)),
            ],
            options={
                'ordering': ['name'],
                'permissions': (('can_view_genre', 'Browse genres'), ('can_create_genre', 'Create a genre'), ('can_modify_genre', 'Modify a genre')),
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='genre_name_case_insensitive_unique', violation_error_message='Genre already exists (case insensiitive match)')],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('v', 'vibe'), ('c', 'color'), ('h', 'chords'), ('s', 'sounds'), ('g', 'groove')], default=None, help_text='Type of tag (e.g. vibe, chords, etc.)', max_length=6)),
                ('value', models.CharField(max_length=100, null=True)),
                ('detail', models.CharField(max_length=1000, null=True)),
                ('date_added', models.DateField(blank=True, null=True)),
                ('public', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['type', 'date_added'],
                'permissions': (('can_view_own_tag', 'Browse your tags'), ('can_view_public_tag', 'Browse public tags'), ('can_view_any_tag', 'Browse tags'), ('can_create_own_tag', 'Create a tag'), ('can_create_any_tag', 'Create a tag'), ('can_modify_own_tag', 'Modify one of your tags'), ('can_modify_any_tag', 'Modify a tag')),
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('beatport_track_id', models.BigIntegerField(help_text='Track ID from Beatport, found in the track URL, which can be used to populate metadata.', unique=True, verbose_name='Beatport Track ID')),
                ('artist', models.ManyToManyField(help_text='Select an artist for this track', to='catalog.artist')),
                ('genre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.genre')),
            ],
            options={
                'ordering': ['title'],
                'permissions': (('can_view_track', 'Browse tracks'), ('can_create_track', 'Create a track'), ('can_modify_track', 'Modify a track')),
            },
        ),
        migrations.CreateModel(
            name='TrackInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this track and owner library', primary_key=True, serialize=False)),
                ('comments', models.TextField(help_text='Enter any notes you want to remember about this track', max_length=1000)),
                ('date_added', models.DateField(blank=True, null=True)),
                ('play_count', models.IntegerField(default=0)),
                ('public', models.BooleanField(default=False)),
                ('rating', models.CharField(blank=True, choices=[('0', 'unplayable'), ('1', 'atrocious'), ('2', 'terrible'), ('3', 'bad'), ('4', 'meh'), ('5', 'okay'), ('6', 'fine'), ('7', 'good'), ('8', 'great'), ('9', 'excellent'), ('10', 'perfect')], default=None, help_text='Track rating', max_length=2)),
                ('tag', models.ManyToManyField(blank=True, help_text='Select a tag for this track', to='catalog.tag')),
                ('track', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='catalog.track')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_added'],
                'permissions': (('can_view_own_trackinstance', 'Browse your tracks'), ('can_view_public_trackinstance', 'Browse public tracks'), ('can_view_any_trackinstance', 'Browse track instances'), ('can_create_own_trackinstance', 'Add a track to your library'), ('can_create_any_trackinstance', 'Create an instance of a track'), ('can_modify_own_trackinstance', 'Modify one of your tracks'), ('can_modify_any_trackinstance', 'Modify a track instance')),
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date_added', models.DateField(blank=True, null=True)),
                ('public', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tag', models.ManyToManyField(blank=True, help_text='Select a tag for this playlist', to='catalog.tag')),
                ('track', models.ManyToManyField(help_text='Select a track for this playlist', to='catalog.trackinstance')),
            ],
            options={
                'ordering': ['date_added'],
                'permissions': (('can_view_own_playlist', 'Browse your playlists'), ('can_view_public_playlist', 'Browse public playlists'), ('can_view_any_playlist', 'Browse playlists'), ('can_create_own_playlist', 'Create a playlist'), ('can_create_any_playlist', 'Create a playlist'), ('can_modify_own_playlist', 'Modify one of your playlists'), ('can_modify_any_playlist', 'Modify a playlist')),
            },
        ),
        migrations.AddConstraint(
            model_name='trackinstance',
            constraint=models.UniqueConstraint(fields=('track', 'user'), name='user_track_unique', violation_error_message='User already has this track in their library'),
        ),
    ]
